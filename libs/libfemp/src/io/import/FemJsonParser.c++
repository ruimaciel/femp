/* Generated by re2c 1.0.1 on Sun Sep 15 12:17:39 2019 */
#include "FemJsonParser.h++"

#include <string.h>	 // for memcpy

#include <boost/lexical_cast.hpp>
#include <iostream>
#include <libfemp/Element.h++>
#include <libfemp/FemException.h++>
#include <libfemp/Material.h++>

FemJsonParser::FemJsonParser() {
	limit = buffer;
	tok = limit;
	pos = limit;
	marker = limit;
	*limit = '\000';
	line_number = 1;

	setParserTable();

	// resets the error message
	this->error.code = Error::Type::ERR_OK;
	this->error.message.clear();
}

void FemJsonParser::operator()(std::istream& file, fem::Model& model) {
	parse(file, model);
}

enum FemJsonParser::Error::Type FemJsonParser::parse(std::istream& file, fem::Model& model) {
	// temp variables used by the parser
	double temp_material_E = 0;
	double temp_material_nu = 0;
	double temp_material_fy = 0;

	ss.push(NT_START);	// initializes the symbol stack with  the start symbol

	enum TerminalTokens terminal_token = lexer(file);
	int nonterminal_token;

	// resets the error message
	this->error.code = Error::Type::ERR_OK;
	this->error.message.clear();

	// temporary object
	fem::Element element;

	while (!ss.empty()) {
		if (terminal_token == ss.top()) {
			ss.pop();
			// std::cout << names(terminal_token) << " << ";
			terminal_token = lexer(file);
			// std::cout << names(terminal_token) << std::endl;
		} else {
			nonterminal_token = ss.top();
			ss.pop();
			// std::cout << "table[\t" << names(nonterminal_token) << "\t]\t[\t" <<
			// names(terminal_token) << "\t]" << std::endl;
			switch (table[(enum NonTerminalTokens)nonterminal_token][terminal_token]) {
				case PR_LABEL:
					ss.push(NT_LABEL_SET);
					ss.push(TT_TEXT_STRING);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_LABEL);
					break;

				case PR_LABEL_SET:
					label = temp_token;
					break;

				case PR_VECTOR3D:
					ss.push(NT_VECTOR3D_SET);
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_NUMBER);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_NUMBER);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_NUMBER);
					ss.push(TT_ARRAY_OPEN);
					break;

				case PR_VECTOR3D_SET: {
					fem::Point3D p;
					p.data[2] = temp_float.back();
					temp_float.pop_back();
					p.data[1] = temp_float.back();
					temp_float.pop_back();
					p.data[0] = temp_float.back();
					temp_float.pop_back();

					temp_point.push_back(p);
				} break;

				case PR_REFERENCE_1:
					ss.push(NT_REFERENCE_SET);
					ss.push(TT_NATURAL_NUMBER);
					break;

				case PR_REFERENCE_ERROR:
					this->error.code = Error::Type::ERR_UNKNOWN;  // TODO return a dedicated error
					this->error.message = "Expected a reference number at line " + boost::lexical_cast<std::string>(line_number);
					return this->error.code;
					break;

				case PR_REFERENCE_SET:
					try {
						reference.push_back(boost::lexical_cast<size_t>(temp_token));
						temp_token.clear();
					} catch (boost::bad_lexical_cast& e) {
						std::cerr << "PR_REFERENCE_SET" << e.what() << std::endl;
						std::cerr << temp_token << std::endl;
					}
					break;

				case PR_REFERENCE_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_REFERENCE_FOLLOW);
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					break;

				case PR_REFERENCE_FOLLOW_1:
					ss.push(NT_REFERENCE_FOLLOW);
					ss.push(NT_REFERENCE);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_REFERENCE_FOLLOW_2:
					break;

				case PR_MULTI_REFERENCE_1:
					ss.push(NT_REFERENCE);
					break;

				case PR_MULTI_REFERENCE_2:
					ss.push(NT_MULTI_REFERENCE_SET);
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_REFERENCE);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					break;

				case PR_MULTI_REFERENCE_SET: {
					size_t last = reference.back();
					reference.pop_back();
					size_t first = reference.back();
					reference.pop_back();
					for (size_t i = first; i <= last; i++) {
						reference.push_back(i);
					}
				} break;

				case PR_BOOLEAN_TRUE:
					// TODO push boolean value
					ss.push(TT_TRUE);
					break;

				case PR_BOOLEAN_FALSE:
					// TODO push boolean value
					ss.push(TT_FALSE);
					break;

				case PR_NUMBER_1:
					ss.push(NT_FLOAT_SET);
					ss.push(TT_FLOAT_NUMBER);
					break;

				case PR_NUMBER_2:
					ss.push(NT_INT_TO_FLOAT_SET);
					ss.push(TT_NATURAL_NUMBER);
					break;

				case PR_FLOAT_SET:
					try {
						temp_float.push_back(boost::lexical_cast<double>(temp_token));
						temp_token.clear();
					} catch (boost::bad_lexical_cast& e) {
						std::cerr << "PR_FLOAT_SET" << e.what() << std::endl;
						std::cerr << temp_token << std::endl;
					}
					break;

				case PR_INT_TO_FLOAT_SET:
					try {
						temp_float.push_back(boost::lexical_cast<double>(temp_token));
						temp_token.clear();
					} catch (boost::bad_lexical_cast& e) {
						std::cerr << "PR_INT_TO_FLOAT_SET" << e.what() << std::endl;
						std::cerr << temp_token << std::endl;
					}
					break;

				case PR_START_1:
					ss.push(TT_EOF);
					ss.push(NT_DOCUMENT);
					break;

				case PR_START_2:
					ss.push(TT_EOF);
					break;

				case PR_DOCUMENT_1:
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_ELEMENT_LIST_FOLLOW);
					ss.push(NT_ELEMENT_LIST);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_NODE_LIST);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_MATERIAL_LIST);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_HEADER);
					ss.push(TT_OBJECT_OPEN);
					break;

				case PR_HEADER_1:
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_MODEL_TYPE);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_FORMAT_VERSION);
					ss.push(TT_OBJECT_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FEM);
					break;

				case PR_FORMAT_VERSION_1:
					ss.push(TT_LABEL_V1_0);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_VERSION);
					break;

				case PR_MODEL_TYPE_1:
					ss.push(NT_MODEL_TYPE_SET);	 // sets the model type
					ss.push(TT_LABEL_3D_SOLID);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_TYPE);
					break;

				case PR_MODEL_TYPE_SET:
					// due to poor design, it isn't possible to set the model type
					break;

				case PR_MATERIAL_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_MATERIAL_FOLLOW);
					ss.push(NT_MATERIAL_SET);
					ss.push(NT_MATERIAL);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_MATERIALS);
					break;

				case PR_MATERIAL_1:
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_ELASTIC_LIMIT);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_POISSON_COEFFICIENT);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_YOUNG_MODULUS);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_LABEL);
					ss.push(TT_VALUE_SEPARATOR);

					// material is linear elastic

					ss.push(NT_MATERIAL_TYPE);
					ss.push(TT_OBJECT_OPEN);
					break;

				case PR_MATERIAL_TYPE_1:
					ss.push(TT_LABEL_LINEAR_ELASTIC);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_TYPE);
					break;

				case PR_YOUNG_MODULUS_1:
					ss.push(NT_YOUNG_MODULUS_SET);
					ss.push(NT_NUMBER);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_E);
					break;

				case PR_YOUNG_MODULUS_SET:
					temp_material_E = temp_float.back();
					temp_float.pop_back();
					break;

				case PR_POISSON_COEFFICIENT_1:
					ss.push(NT_POISSON_COEFFICIENT_SET);
					ss.push(NT_NUMBER);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NU);
					break;

				case PR_POISSON_COEFFICIENT_SET:
					temp_material_nu = temp_float.back();
					temp_float.pop_back();
					break;

				case PR_ELASTIC_LIMIT_1:
					ss.push(NT_ELASTIC_LIMIT_SET);
					ss.push(NT_NUMBER);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FY);
					break;

				case PR_ELASTIC_LIMIT_SET:
					temp_material_fy = temp_float.back();
					temp_float.pop_back();
					break;

				case PR_MATERIAL_SET: {
					fem::Material material(label, temp_material_E, temp_material_nu);
					model.pushMaterial(material);
				} break;

				case PR_MATERIAL_FOLLOW_1:
					ss.push(NT_MATERIAL_FOLLOW);
					ss.push(NT_MATERIAL_SET);
					ss.push(NT_MATERIAL);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_MATERIAL_FOLLOW_2:
					break;

				case PR_NODE_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_NODE_FOLLOW);
					ss.push(NT_NODE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					break;

				case PR_NODE_1:
					ss.push(NT_NODE_SET);
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_VECTOR3D);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					break;

				case PR_NODE_SET:
					model.setNode(reference.back(), temp_point.back());
					reference.pop_back();
					temp_point.pop_back();
					break;

				case PR_NODE_FOLLOW_1:
					ss.push(NT_NODE_FOLLOW);
					ss.push(NT_NODE);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODE_FOLLOW_2:
					break;

				case PR_ELEMENT_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_ELEMENT_FOLLOW);
					ss.push(NT_ELEMENT);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_ELEMENTS);
					break;

				case PR_ELEMENT_1:
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_ELEMENT_SET);
					ss.push(NT_ELEMENT_TYPE_FOLLOW);
					ss.push(NT_ELEMENT_TYPE);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_TYPE);
					ss.push(TT_OBJECT_OPEN);

					reference.clear();
					break;

				case PR_ELEMENT_SET_1:
					model.pushElement(element);
					break;

				case PR_ELEMENT_TYPE_1:
					ss.push(NT_ELEMENT_HEXAHEDRON8);
					break;

				case PR_ELEMENT_TYPE_2:
					ss.push(NT_ELEMENT_HEXAHEDRON20);
					break;

				case PR_ELEMENT_TYPE_3:
					ss.push(NT_ELEMENT_HEXAHEDRON27);
					break;

				case PR_ELEMENT_TYPE_4:
					ss.push(NT_ELEMENT_TETRAHEDRON4);
					break;

				case PR_ELEMENT_TYPE_5:
					ss.push(NT_ELEMENT_TETRAHEDRON10);
					break;
				case PR_ELEMENT_TYPE_6:
					ss.push(NT_ELEMENT_PRISM6);
					break;

				case PR_ELEMENT_TYPE_7:
					ss.push(NT_ELEMENT_PRISM15);
					break;

				case PR_ELEMENT_TYPE_8:
					ss.push(NT_ELEMENT_PRISM18);
					break;

				case PR_ELEMENT_HEXAHEDRON8_1:
					ss.push(NT_ELEMENT_HEXAHEDRON8_SET);
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 7; i++) {
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_HEXAHEDRON8);
					break;

				case PR_ELEMENT_HEXAHEDRON20_1:
					ss.push(NT_ELEMENT_HEXAHEDRON20_SET);
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 19; i++) {
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_HEXAHEDRON20);
					break;

				case PR_ELEMENT_HEXAHEDRON27_1:
					ss.push(NT_ELEMENT_HEXAHEDRON27_SET);
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 26; i++) {
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_HEXAHEDRON27);
					break;

				case PR_ELEMENT_TETRAHEDRON4_1:
					ss.push(NT_ELEMENT_TETRAHEDRON4_SET);
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 3; i++) {
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_TETRAHEDRON4);
					break;

				case PR_ELEMENT_TETRAHEDRON10_1:
					ss.push(NT_ELEMENT_TETRAHEDRON10_SET);
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 9; i++) {
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_TETRAHEDRON10);
					break;

				case PR_ELEMENT_PRISM6_1:
					ss.push(NT_ELEMENT_PRISM6_SET);
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 5; i++) {
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_PRISM6);
					break;

				case PR_ELEMENT_PRISM15_1:
					ss.push(NT_ELEMENT_PRISM15_SET);
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 14; i++) {
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_PRISM15);
					break;

				case PR_ELEMENT_PRISM18_1:
					ss.push(NT_ELEMENT_PRISM18_SET);
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 17; i++) {
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_PRISM18);
					break;

				case PR_ELEMENT_HEXAHEDRON8_SET:
					element.clear();
					element.type = fem::Element::FE_HEXAHEDRON8;
					element.nodes = reference;
					reference.clear();
					break;

				case PR_ELEMENT_HEXAHEDRON20_SET:
					element.clear();
					element.type = fem::Element::FE_HEXAHEDRON20;
					element.nodes = reference;
					reference.clear();
					break;

				case PR_ELEMENT_HEXAHEDRON27_SET:
					element.clear();
					element.type = fem::Element::FE_HEXAHEDRON27;
					element.nodes = reference;
					reference.clear();
					break;

				case PR_ELEMENT_TETRAHEDRON4_SET:
					element.clear();
					element.type = fem::Element::FE_TETRAHEDRON4;
					element.nodes = reference;
					reference.clear();
					break;

				case PR_ELEMENT_TETRAHEDRON10_SET:
					element.clear();
					element.type = fem::Element::FE_TETRAHEDRON10;
					element.nodes = reference;
					reference.clear();
					break;

				case PR_ELEMENT_PRISM6_SET:
					element.clear();
					element.type = fem::Element::FE_PRISM6;
					element.nodes = reference;
					reference.clear();
					break;

				case PR_ELEMENT_PRISM15_SET:
					element.clear();
					element.type = fem::Element::FE_PRISM15;
					element.nodes = reference;
					reference.clear();
					break;

				case PR_ELEMENT_PRISM18_SET:
					element.clear();
					element.type = fem::Element::FE_PRISM18;
					element.nodes = reference;
					reference.clear();
					break;

				case PR_ELEMENT_TYPE_FOLLOW_1:
					ss.push(NT_ELEMENT_MATERIAL);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_ELEMENT_TYPE_FOLLOW_2:
					break;

				case PR_ELEMENT_MATERIAL_1:
					ss.push(NT_ELEMENT_MATERIAL_SET);
					ss.push(NT_REFERENCE);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_MATERIAL);
					break;

				case PR_ELEMENT_MATERIAL_SET_1:
					model.setDefaultMaterial(reference.back());
					reference.pop_back();
					break;

				case PR_ELEMENT_FOLLOW_1:
					ss.push(NT_ELEMENT_FOLLOW);
					ss.push(NT_ELEMENT);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_ELEMENT_FOLLOW_2:
					break;

				case PR_ELEMENT_LIST_FOLLOW_1:
					ss.push(NT_EXTRA_DEFINITIONS);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_ELEMENT_LIST_FOLLOW_2:
					break;

				case PR_EXTRA_DEFINITIONS_1:
					ss.push(NT_GROUPS_LIST_FOLLOW);
					ss.push(NT_GROUPS_LIST);
					break;

				case PR_EXTRA_DEFINITIONS_2:
					ss.push(NT_NODE_RESTRICTIONS_LIST_FOLLOW);
					ss.push(NT_NODE_RESTRICTIONS_LIST);
					break;

				case PR_EXTRA_DEFINITIONS_3:
					ss.push(NT_LOAD_PATTERNS_LIST_FOLLOW);
					ss.push(NT_LOAD_PATTERNS_LIST);
					break;

				case PR_GROUPS_LIST_1:
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_GROUP_TYPE);
					ss.push(TT_OBJECT_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_GROUPS);
					break;

				case PR_GROUP_TYPE_1:
					ss.push(NT_NODE_GROUP_LIST_FOLLOW);
					ss.push(NT_NODE_GROUP_LIST);
					break;

				case PR_GROUP_TYPE_2:
					ss.push(NT_ELEMENT_GROUP_LIST_FOLLOW);
					ss.push(NT_ELEMENT_GROUP_LIST);
					break;

				case PR_GROUPS_LIST_FOLLOW_1:
					ss.push(NT_GROUPS_LIST_FOLLOW_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_GROUPS_LIST_FOLLOW_2:
					break;

				case PR_GROUPS_LIST_FOLLOW_FOLLOW_1:
					ss.push(NT_NODE_RESTRICTIONS_LIST_FOLLOW);
					ss.push(NT_NODE_RESTRICTIONS_LIST);
					break;

				case PR_GROUPS_LIST_FOLLOW_FOLLOW_2:
					ss.push(NT_LOAD_PATTERNS_LIST_FOLLOW);
					ss.push(NT_LOAD_PATTERNS_LIST);
					break;

				case PR_NODE_GROUP_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_NODE_GROUP_FOLLOW);
					ss.push(NT_NODE_GROUP_SET);
					ss.push(NT_NODE_GROUP);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					break;

				case PR_NODE_GROUP_LIST_FOLLOW_1:
					ss.push(NT_ELEMENT_GROUP_LIST);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODE_GROUP_LIST_FOLLOW_2:
					break;

				case PR_NODE_GROUP_1:
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_REFERENCE_LIST);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_LABEL);
					ss.push(TT_OBJECT_OPEN);
					break;

				case PR_NODE_GROUP_SET: {
					fem::NodeGroup n;
					n.setLabel(label);
					for (std::vector<size_t>::const_iterator i = reference.begin(); i != reference.end(); i++) {
						if (*i < model.getNodeMap().size())
							n.pushNode(*i);
						else {
							// TODO warning message
							std::cerr << "FemJsonParser: node group " << label << " refers to invalid node: " << *i << std::endl;
						}
					}
					reference.clear();
					model.pushNodeGroup(n);
				} break;

				case PR_NODE_GROUP_FOLLOW_1:
					ss.push(NT_NODE_GROUP_FOLLOW_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODE_GROUP_FOLLOW_2:
					break;

				case PR_NODE_GROUP_FOLLOW_FOLLOW_1:
					ss.push(NT_NODE_GROUP_FOLLOW);
					ss.push(NT_NODE_GROUP_SET);
					ss.push(NT_NODE_GROUP);
					break;

				case PR_ELEMENT_GROUP_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_ELEMENT_GROUP_FOLLOW);
					ss.push(NT_ELEMENT_GROUP_SET);
					ss.push(NT_ELEMENT_GROUP);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_ELEMENTS);
					break;

				case PR_ELEMENT_GROUP_LIST_FOLLOW_1:
					break;

				case PR_ELEMENT_GROUP_1:
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_REFERENCE_LIST);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_ELEMENTS);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_LABEL);
					ss.push(TT_OBJECT_OPEN);
					reference.clear();
					break;

				case PR_ELEMENT_GROUP_SET: {
					fem::ElementGroup e;
					e.setLabel(label);
					for (std::vector<size_t>::const_iterator i = reference.begin(); i != reference.end(); i++) {
						e.pushElement(*i);
					}
					reference.clear();
					model.pushElementGroup(e);
				} break;

				case PR_ELEMENT_GROUP_FOLLOW_1:
					ss.push(NT_ELEMENT_GROUP_FOLLOW_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_ELEMENT_GROUP_FOLLOW_2:
					break;

				case PR_ELEMENT_GROUP_FOLLOW_FOLLOW_1:
					ss.push(NT_ELEMENT_GROUP_FOLLOW);
					ss.push(NT_ELEMENT_GROUP_SET);
					ss.push(NT_ELEMENT_GROUP);
					break;

				case PR_NODE_RESTRICTIONS_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_NODE_RESTRICTION_FOLLOW);
					ss.push(NT_NODE_RESTRICTION);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODE_RESTRICTIONS);
					break;

				case PR_NODE_RESTRICTIONS_LIST_FOLLOW_1:
					ss.push(NT_NODE_RESTRICTIONS_LIST_FOLLOW_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODE_RESTRICTIONS_LIST_FOLLOW_2:
					break;

				case PR_NODE_RESTRICTIONS_LIST_FOLLOW_FOLLOW_1:
					ss.push(NT_LOAD_PATTERNS_LIST_FOLLOW);
					ss.push(NT_LOAD_PATTERNS_LIST);
					break;

				case PR_NODE_RESTRICTION_1:
					ss.push(NT_NODE_RESTRICTION_SET);
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_NODE_DOF);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_NODE_REFERENCE);
					ss.push(TT_OBJECT_OPEN);

					temp_node_restrictions.reset();
					break;

				case PR_NODE_REFERENCE_1:
					ss.push(NT_NODE_REFERENCE_SET);
					ss.push(NT_MULTI_REFERENCE);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODE);
					reference.clear();
					break;

				case PR_NODE_REFERENCE_SET:
					break;

				case PR_NODE_DOF_1:
					ss.push(NT_NODE_DOF_DX_FOLLOW);
					ss.push(NT_NODE_DOF_DX);
					break;

				case PR_NODE_DOF_2:
					ss.push(NT_NODE_DOF_DY_FOLLOW);
					ss.push(NT_NODE_DOF_DY);
					break;

				case PR_NODE_DOF_3:
					ss.push(NT_NODE_DOF_DZ_FOLLOW);
					ss.push(NT_NODE_DOF_DZ);
					break;

				case PR_NODE_DOF_DX_1:
					ss.push(NT_NODE_DOF_DX_SET);
					ss.push(NT_BOOLEAN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_DX);
					break;

				case PR_NODE_DOF_DX_SET:
					temp_node_restrictions.setdx();
					break;

				case PR_NODE_DOF_DX_FOLLOW_1:
					ss.push(NT_NODE_DOF_DX_FOLLOW_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODE_DOF_DX_FOLLOW_2:
					break;

				case PR_NODE_DOF_DX_FOLLOW_FOLLOW_1:
					ss.push(NT_NODE_DOF_DY_FOLLOW);
					ss.push(NT_NODE_DOF_DY);
					break;

				case PR_NODE_DOF_DX_FOLLOW_FOLLOW_2:
					ss.push(NT_NODE_DOF_DZ_FOLLOW);
					ss.push(NT_NODE_DOF_DZ);
					break;

				case PR_NODE_DOF_DX_FOLLOW_FOLLOW_3:
					break;

				case PR_NODE_DOF_DY_1:
					ss.push(NT_NODE_DOF_DY_SET);
					ss.push(NT_BOOLEAN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_DY);
					break;

				case PR_NODE_DOF_DY_SET:
					temp_node_restrictions.setdy();
					break;

				case PR_NODE_DOF_DY_FOLLOW_1:
					ss.push(NT_NODE_DOF_DY_FOLLOW_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODE_DOF_DY_FOLLOW_2:
					break;

				case PR_NODE_DOF_DY_FOLLOW_FOLLOW_1:
					ss.push(NT_NODE_DOF_DZ_FOLLOW);
					ss.push(NT_NODE_DOF_DZ);
					break;

				case PR_NODE_DOF_DY_FOLLOW_FOLLOW_2:
					break;

				case PR_NODE_DOF_DZ_1:
					ss.push(NT_NODE_DOF_DZ_SET);
					ss.push(NT_BOOLEAN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_DZ);
					break;

				case PR_NODE_DOF_DZ_SET:
					temp_node_restrictions.setdz();
					break;

				case PR_NODE_DOF_DZ_FOLLOW_1:
					break;

				case PR_NODE_RESTRICTION_SET:
					// TODO finish this
					for (std::vector<size_t>::iterator i = reference.begin(); i != reference.end(); i++) {
						model.pushNodeRestrictions(*i, temp_node_restrictions);
					}
					reference.clear();
					temp_node_restrictions.reset();
					break;

				case PR_NODE_RESTRICTION_FOLLOW_1:
					ss.push(NT_NODE_RESTRICTION_FOLLOW);
					ss.push(NT_NODE_RESTRICTION);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODE_RESTRICTION_FOLLOW_2:
					break;

				case PR_LOAD_PATTERNS_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_LOAD_PATTERN_FOLLOW);
					ss.push(NT_LOAD_PATTERN);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_LOAD_PATTERNS);
					break;

				case PR_LOAD_PATTERN_1:
					ss.push(NT_LOAD_PATTERN_SET);
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_LOAD_PATTERN_LABEL_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_LABEL);
					ss.push(TT_OBJECT_OPEN);

					temp_load_pattern.clear();
					break;

				case PR_LOAD_PATTERN_SET:
					temp_load_pattern.setLabel(label);
					model.pushLoadPattern(temp_load_pattern);
					break;

				case PR_LOAD_PATTERN_LABEL_FOLLOW_1:
					ss.push(NT_NODAL_LOADS_LIST_FOLLOW);
					ss.push(NT_NODAL_LOADS_LIST);
					break;

				case PR_LOAD_PATTERN_LABEL_FOLLOW_2:
					ss.push(NT_SURFACE_LOADS_LIST_FOLLOW);
					ss.push(NT_SURFACE_LOADS_LIST);
					break;

				case PR_LOAD_PATTERN_LABEL_FOLLOW_3:
					ss.push(NT_DOMAIN_LOADS_LIST_FOLLOW);
					ss.push(NT_DOMAIN_LOADS_LIST);
					break;

				case PR_NODAL_LOADS_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_NODAL_LOAD_FOLLOW);
					ss.push(NT_NODAL_LOAD);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODAL_LOADS);
					break;

				case PR_NODAL_LOAD_1:
					ss.push(NT_NODAL_LOAD_SET);
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_NODAL_LOAD_FORCE);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_NODE_REFERENCE);
					ss.push(TT_OBJECT_OPEN);
					break;

				case PR_NODAL_LOAD_SET:
					for (std::vector<size_t>::iterator i = reference.begin(); i != reference.end(); i++) {
						temp_load_pattern.addNodalLoad(*i, temp_point.back());
					}
					reference.clear();
					temp_point.pop_back();
					break;

				case PR_NODAL_LOAD_FOLLOW_1:
					ss.push(NT_NODAL_LOAD_FOLLOW);
					ss.push(NT_NODAL_LOAD);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODAL_LOAD_FOLLOW_2:
					break;

				case PR_NODAL_LOAD_FORCE_1:
					ss.push(NT_VECTOR3D);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FORCE);
					break;

				case PR_NODAL_LOADS_LIST_FOLLOW_1:
					ss.push(NT_NODAL_LOADS_LIST_FOLLOW_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_NODAL_LOADS_LIST_FOLLOW_2:
					break;

				case PR_SURFACE_LOADS_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_SURFACE_LOAD_FOLLOW);
					ss.push(NT_SURFACE_LOAD);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_SURFACE_LOADS);
					break;

				case PR_SURFACE_LOAD_1:
					ss.push(NT_SURFACE_LOAD_SET);
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_SURFACE_LOAD_TYPE);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_TYPE);
					ss.push(TT_OBJECT_OPEN);
					break;

				case PR_SURFACE_LOAD_TYPE_1:
					ss.push(NT_SURFACE_TRIANGLE3_FORCES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_SURFACE_TRIANGLE3_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_TRIANGLE3);

					element.type = fem::Element::FE_TRIANGLE3;
					break;

				case PR_SURFACE_LOAD_TYPE_2:
					ss.push(NT_SURFACE_TRIANGLE6_FORCES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_SURFACE_TRIANGLE6_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_TRIANGLE6);
					element.type = fem::Element::FE_TRIANGLE6;
					break;

				case PR_SURFACE_LOAD_TYPE_3:
					ss.push(NT_SURFACE_QUADRANGLE4_FORCES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_SURFACE_QUADRANGLE4_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_QUADRANGLE4);
					element.type = fem::Element::FE_QUADRANGLE4;
					break;

				case PR_SURFACE_LOAD_TYPE_4:
					ss.push(NT_SURFACE_QUADRANGLE8_FORCES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_SURFACE_QUADRANGLE8_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_QUADRANGLE8);
					element.type = fem::Element::FE_QUADRANGLE8;
					break;

				case PR_SURFACE_LOAD_TYPE_5:
					ss.push(NT_SURFACE_QUADRANGLE9_FORCES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_SURFACE_QUADRANGLE9_NODES);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(TT_LABEL_QUADRANGLE9);
					element.type = fem::Element::FE_QUADRANGLE9;
					break;

				case PR_SURFACE_LOAD_SET: {
					element.nodes = reference;

					fem::SurfaceLoad* surface_load = fem::SurfaceLoad::makeSurfaceLoad(&element);
					surface_load->surface_forces = temp_point;

					temp_load_pattern.addSurfaceLoad(surface_load);
					reference.clear();
					temp_point.clear();
				} break;

				case PR_SURFACE_TRIANGLE3_NODES_1:
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 2; i++) {
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					break;

				case PR_SURFACE_TRIANGLE6_NODES_1:
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 5; i++) {
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					break;

				case PR_SURFACE_QUADRANGLE4_NODES_1:
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 3; i++) {
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					break;

				case PR_SURFACE_QUADRANGLE8_NODES_1:
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 7; i++) {
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					break;

				case PR_SURFACE_QUADRANGLE9_NODES_1:
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 8; i++) {
						ss.push(NT_REFERENCE);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_REFERENCE);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_NODES);
					break;

				case PR_SURFACE_TRIANGLE3_FORCES_1:
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 2; i++) {
						ss.push(NT_VECTOR3D);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_VECTOR3D);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FORCE);
					break;

				case PR_SURFACE_TRIANGLE6_FORCES_1:
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 5; i++) {
						ss.push(NT_VECTOR3D);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_VECTOR3D);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FORCE);
					break;

				case PR_SURFACE_QUADRANGLE4_FORCES_1:
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 3; i++) {
						ss.push(NT_VECTOR3D);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_VECTOR3D);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FORCE);
					break;

				case PR_SURFACE_QUADRANGLE8_FORCES_1:
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 7; i++) {
						ss.push(NT_VECTOR3D);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_VECTOR3D);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FORCE);
					break;

				case PR_SURFACE_QUADRANGLE9_FORCES_1:
					ss.push(TT_ARRAY_CLOSE);
					for (int i = 0; i < 8; i++) {
						ss.push(NT_VECTOR3D);
						ss.push(TT_VALUE_SEPARATOR);
					}
					ss.push(NT_VECTOR3D);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FORCE);
					break;

				case PR_SURFACE_LOADS_LIST_FOLLOW_1:
					ss.push(NT_SURFACE_LOADS_LIST_FOLLOW_FOLLOW);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_SURFACE_LOADS_LIST_FOLLOW_2:
					break;

				case PR_SURFACE_LOADS_LIST_FOLLOW_FOLLOW_1:
					ss.push(NT_DOMAIN_LOADS_LIST_FOLLOW);
					ss.push(NT_DOMAIN_LOADS_LIST);
					break;

				case PR_SURFACE_LOAD_FOLLOW_1:
					ss.push(NT_SURFACE_LOAD_FOLLOW);
					ss.push(NT_SURFACE_LOAD);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_SURFACE_LOAD_FOLLOW_2:
					break;

				case PR_DOMAIN_LOADS_LIST_1:
					ss.push(TT_ARRAY_CLOSE);
					ss.push(NT_DOMAIN_LOAD_FOLLOW);
					ss.push(NT_DOMAIN_LOAD);
					ss.push(TT_ARRAY_OPEN);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_DOMAIN_LOADS);
					break;

				case PR_DOMAIN_LOADS_LIST_FOLLOW_1:
					break;

				case PR_DOMAIN_LOAD_1:
					ss.push(NT_DOMAIN_LOAD_SET);
					ss.push(TT_OBJECT_CLOSE);
					ss.push(NT_DOMAIN_FORCE);
					ss.push(TT_VALUE_SEPARATOR);
					ss.push(NT_ELEMENT_REFERENCE);
					ss.push(TT_OBJECT_OPEN);
					break;

				case PR_DOMAIN_LOAD_SET:
					for (std::vector<size_t>::iterator i = reference.begin(); i != reference.end(); i++) {
						if (*i < model.numberOfElements()) {
							temp_load_pattern.addDomainLoad(*i, temp_point.back());
						} else {
							/* this model tries to set a domain load on an element which
							 * doesn't exist */
							std::cerr << "Error: domain load applied to non-existing element #" << *i << std::endl;
						}
					}
					reference.clear();
					temp_point.pop_back();
					break;

				case PR_ELEMENT_REFERENCE_1:
					ss.push(NT_MULTI_REFERENCE);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_ELEMENT);
					break;

				case PR_DOMAIN_FORCE_1:
					ss.push(NT_VECTOR3D);
					ss.push(TT_NAME_SEPARATOR);
					ss.push(TT_LABEL_FORCE);
					break;

				case PR_DOMAIN_LOAD_FOLLOW_1:
					ss.push(NT_DOMAIN_LOAD_FOLLOW);
					ss.push(NT_DOMAIN_LOAD);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_DOMAIN_LOAD_FOLLOW_2:
					break;

				case PR_NODAL_LOADS_LIST_FOLLOW_FOLLOW_1:
					ss.push(NT_SURFACE_LOADS_LIST_FOLLOW);
					ss.push(NT_SURFACE_LOADS_LIST);
					break;

				case PR_NODAL_LOADS_LIST_FOLLOW_FOLLOW_2:
					ss.push(NT_DOMAIN_LOADS_LIST_FOLLOW);
					ss.push(NT_DOMAIN_LOADS_LIST);
					break;

				case PR_LOAD_PATTERN_FOLLOW_1:
					ss.push(NT_LOAD_PATTERN_FOLLOW);
					ss.push(NT_LOAD_PATTERN);
					ss.push(TT_VALUE_SEPARATOR);
					break;

				case PR_LOAD_PATTERN_FOLLOW_2:
					break;

				case PR_LOAD_PATTERNS_LIST_FOLLOW_1:
					break;

				default:
					this->error.code = Error::Type::ERR_UNKNOWN;
					this->error.message = "Unknown error while parsing line " + boost::lexical_cast<std::string>(line_number);
					return this->error.code;
					break;
			}
		}
	}

	// all is good
	this->error.code = Error::Type::ERR_OK;
	this->error.message.clear();
	return this->error.code;
}

enum FemJsonParser::TerminalTokens FemJsonParser::lexer(std::istream& file) {
#define YYFILL fill(file);
starting_point:
	tok = pos;

	{
		unsigned char yych;
		unsigned int yyaccept = 0;
		if ((limit - pos) < 19) YYFILL(19);
		yych = *pos;
		switch (yych) {
			case 0x00:
				goto yy2;
			case '\t':
			case ' ':
				goto yy6;
			case '\n':
				goto yy9;
			case '"':
				goto yy11;
			case '+':
			case '-':
				goto yy12;
			case ',':
				goto yy13;
			case '0':
				goto yy15;
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				goto yy17;
			case ':':
				goto yy19;
			case '[':
				goto yy21;
			case ']':
				goto yy23;
			case 'f':
				goto yy25;
			case 'n':
				goto yy26;
			case 't':
				goto yy27;
			case '{':
				goto yy28;
			case '}':
				goto yy30;
			default:
				goto yy4;
		}
	yy2:
		++pos;
		{ return lexerReturnProcedures(TT_EOF); }
	yy4:
		++pos;
	yy5 : { return lexerReturnProcedures(TT_UNKNOWN); }
	yy6:
		++pos;
		if (limit <= pos) YYFILL(1);
		yych = *pos;
		switch (yych) {
			case '\t':
			case ' ':
				goto yy6;
			default:
				goto yy8;
		}
	yy8 : { goto starting_point; }
	yy9:
		++pos;
		{
			line_number++;
			goto starting_point;
		}
	yy11:
		yyaccept = 0;
		yych = *(marker = ++pos);
		switch (yych) {
			case '\n':
				goto yy5;
			case '1':
				goto yy37;
			case '3':
				goto yy38;
			case 'E':
				goto yy39;
			case 'd':
				goto yy40;
			case 'e':
				goto yy41;
			case 'f':
				goto yy42;
			case 'g':
				goto yy43;
			case 'h':
				goto yy44;
			case 'l':
				goto yy45;
			case 'm':
				goto yy46;
			case 'n':
				goto yy47;
			case 'p':
				goto yy48;
			case 'q':
				goto yy49;
			case 's':
				goto yy50;
			case 't':
				goto yy51;
			case 'v':
				goto yy52;
			default:
				goto yy33;
		}
	yy12:
		yych = *++pos;
		switch (yych) {
			case '0':
				goto yy53;
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				goto yy55;
			default:
				goto yy5;
		}
	yy13:
		++pos;
		{ return lexerReturnProcedures(TT_VALUE_SEPARATOR); }
	yy15:
		yyaccept = 1;
		yych = *(marker = ++pos);
		switch (yych) {
			case '.':
				goto yy57;
			case 'E':
			case 'e':
				goto yy58;
			default:
				goto yy16;
		}
	yy16 : { return lexerReturnProcedures(TT_NATURAL_NUMBER); }
	yy17:
		yyaccept = 1;
		marker = ++pos;
		if ((limit - pos) < 3) YYFILL(3);
		yych = *pos;
		switch (yych) {
			case '.':
				goto yy57;
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				goto yy17;
			case 'E':
			case 'e':
				goto yy58;
			default:
				goto yy16;
		}
	yy19:
		++pos;
		{ return lexerReturnProcedures(TT_NAME_SEPARATOR); }
	yy21:
		++pos;
		{ return lexerReturnProcedures(TT_ARRAY_OPEN); }
	yy23:
		++pos;
		{ return lexerReturnProcedures(TT_ARRAY_CLOSE); }
	yy25:
		yyaccept = 0;
		yych = *(marker = ++pos);
		switch (yych) {
			case 'a':
				goto yy59;
			default:
				goto yy5;
		}
	yy26:
		yyaccept = 0;
		yych = *(marker = ++pos);
		switch (yych) {
			case 'u':
				goto yy60;
			default:
				goto yy5;
		}
	yy27:
		yyaccept = 0;
		yych = *(marker = ++pos);
		switch (yych) {
			case 'r':
				goto yy61;
			default:
				goto yy5;
		}
	yy28:
		++pos;
		{ return lexerReturnProcedures(TT_OBJECT_OPEN); }
	yy30:
		++pos;
		{ return lexerReturnProcedures(TT_OBJECT_CLOSE); }
	yy32:
		++pos;
		if (limit <= pos) YYFILL(1);
		yych = *pos;
	yy33:
		switch (yych) {
			case '\n':
				goto yy34;
			case '"':
				goto yy35;
			default:
				goto yy32;
		}
	yy34:
		pos = marker;
		switch (yyaccept) {
			case 0:
				goto yy5;
			case 1:
				goto yy16;
			default:
				goto yy54;
		}
	yy35:
		++pos;
		{ return lexerReturnProcedures(TT_TEXT_STRING); }
	yy37:
		yych = *++pos;
		switch (yych) {
			case '.':
				goto yy62;
			default:
				goto yy33;
		}
	yy38:
		yych = *++pos;
		switch (yych) {
			case 'D':
				goto yy63;
			default:
				goto yy33;
		}
	yy39:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy64;
			default:
				goto yy33;
		}
	yy40:
		yych = *++pos;
		switch (yych) {
			case 'o':
				goto yy66;
			case 'x':
				goto yy67;
			case 'y':
				goto yy68;
			case 'z':
				goto yy69;
			default:
				goto yy33;
		}
	yy41:
		yych = *++pos;
		switch (yych) {
			case 'l':
				goto yy70;
			default:
				goto yy33;
		}
	yy42:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy71;
			case 'o':
				goto yy72;
			case 'y':
				goto yy73;
			default:
				goto yy33;
		}
	yy43:
		yych = *++pos;
		switch (yych) {
			case 'r':
				goto yy74;
			default:
				goto yy33;
		}
	yy44:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy75;
			default:
				goto yy33;
		}
	yy45:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy76;
			case 'i':
				goto yy77;
			case 'o':
				goto yy78;
			default:
				goto yy33;
		}
	yy46:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy79;
			default:
				goto yy33;
		}
	yy47:
		yych = *++pos;
		switch (yych) {
			case 'o':
				goto yy80;
			case 'u':
				goto yy81;
			default:
				goto yy33;
		}
	yy48:
		yych = *++pos;
		switch (yych) {
			case 'r':
				goto yy82;
			default:
				goto yy33;
		}
	yy49:
		yych = *++pos;
		switch (yych) {
			case 'u':
				goto yy83;
			default:
				goto yy33;
		}
	yy50:
		yych = *++pos;
		switch (yych) {
			case 'u':
				goto yy84;
			default:
				goto yy33;
		}
	yy51:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy85;
			case 'r':
				goto yy86;
			case 'y':
				goto yy87;
			default:
				goto yy33;
		}
	yy52:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy88;
			default:
				goto yy33;
		}
	yy53:
		yyaccept = 2;
		yych = *(marker = ++pos);
		switch (yych) {
			case '.':
				goto yy57;
			case 'E':
			case 'e':
				goto yy58;
			default:
				goto yy54;
		}
	yy54 : { return lexerReturnProcedures(TT_FLOAT_NUMBER); }
	yy55:
		yyaccept = 2;
		marker = ++pos;
		if ((limit - pos) < 3) YYFILL(3);
		yych = *pos;
		switch (yych) {
			case '.':
				goto yy57;
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				goto yy55;
			case 'E':
			case 'e':
				goto yy58;
			default:
				goto yy54;
		}
	yy57:
		yych = *++pos;
		switch (yych) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				goto yy89;
			default:
				goto yy34;
		}
	yy58:
		yych = *++pos;
		switch (yych) {
			case '+':
			case '-':
				goto yy91;
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				goto yy92;
			default:
				goto yy34;
		}
	yy59:
		yych = *++pos;
		switch (yych) {
			case 'l':
				goto yy94;
			default:
				goto yy34;
		}
	yy60:
		yych = *++pos;
		switch (yych) {
			case 'l':
				goto yy95;
			default:
				goto yy34;
		}
	yy61:
		yych = *++pos;
		switch (yych) {
			case 'u':
				goto yy96;
			default:
				goto yy34;
		}
	yy62:
		yych = *++pos;
		switch (yych) {
			case '0':
				goto yy97;
			default:
				goto yy33;
		}
	yy63:
		yych = *++pos;
		switch (yych) {
			case ' ':
				goto yy98;
			default:
				goto yy33;
		}
	yy64:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_E); }
	yy66:
		yych = *++pos;
		switch (yych) {
			case 'm':
				goto yy99;
			default:
				goto yy33;
		}
	yy67:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy100;
			default:
				goto yy33;
		}
	yy68:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy102;
			default:
				goto yy33;
		}
	yy69:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy104;
			default:
				goto yy33;
		}
	yy70:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy106;
			default:
				goto yy33;
		}
	yy71:
		yych = *++pos;
		switch (yych) {
			case 'm':
				goto yy107;
			default:
				goto yy33;
		}
	yy72:
		yych = *++pos;
		switch (yych) {
			case 'r':
				goto yy108;
			default:
				goto yy33;
		}
	yy73:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy109;
			default:
				goto yy33;
		}
	yy74:
		yych = *++pos;
		switch (yych) {
			case 'o':
				goto yy111;
			default:
				goto yy33;
		}
	yy75:
		yych = *++pos;
		switch (yych) {
			case 'x':
				goto yy112;
			default:
				goto yy33;
		}
	yy76:
		yych = *++pos;
		switch (yych) {
			case 'b':
				goto yy113;
			default:
				goto yy33;
		}
	yy77:
		yych = *++pos;
		switch (yych) {
			case 'n':
				goto yy114;
			default:
				goto yy33;
		}
	yy78:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy115;
			default:
				goto yy33;
		}
	yy79:
		yych = *++pos;
		switch (yych) {
			case 't':
				goto yy116;
			default:
				goto yy33;
		}
	yy80:
		yych = *++pos;
		switch (yych) {
			case 'd':
				goto yy117;
			default:
				goto yy33;
		}
	yy81:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy118;
			default:
				goto yy33;
		}
	yy82:
		yych = *++pos;
		switch (yych) {
			case 'i':
				goto yy120;
			default:
				goto yy33;
		}
	yy83:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy121;
			default:
				goto yy33;
		}
	yy84:
		yych = *++pos;
		switch (yych) {
			case 'r':
				goto yy122;
			default:
				goto yy33;
		}
	yy85:
		yych = *++pos;
		switch (yych) {
			case 't':
				goto yy123;
			default:
				goto yy33;
		}
	yy86:
		yych = *++pos;
		switch (yych) {
			case 'i':
				goto yy124;
			default:
				goto yy33;
		}
	yy87:
		yych = *++pos;
		switch (yych) {
			case 'p':
				goto yy125;
			default:
				goto yy33;
		}
	yy88:
		yych = *++pos;
		switch (yych) {
			case 'r':
				goto yy126;
			default:
				goto yy33;
		}
	yy89:
		yyaccept = 2;
		marker = ++pos;
		if ((limit - pos) < 3) YYFILL(3);
		yych = *pos;
		switch (yych) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				goto yy89;
			case 'E':
			case 'e':
				goto yy58;
			default:
				goto yy54;
		}
	yy91:
		yych = *++pos;
		switch (yych) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				goto yy92;
			default:
				goto yy34;
		}
	yy92:
		++pos;
		if (limit <= pos) YYFILL(1);
		yych = *pos;
		switch (yych) {
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				goto yy92;
			default:
				goto yy54;
		}
	yy94:
		yych = *++pos;
		switch (yych) {
			case 's':
				goto yy127;
			default:
				goto yy34;
		}
	yy95:
		yych = *++pos;
		switch (yych) {
			case 'l':
				goto yy128;
			default:
				goto yy34;
		}
	yy96:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy130;
			default:
				goto yy34;
		}
	yy97:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy132;
			default:
				goto yy33;
		}
	yy98:
		yych = *++pos;
		switch (yych) {
			case 's':
				goto yy134;
			default:
				goto yy33;
		}
	yy99:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy135;
			default:
				goto yy33;
		}
	yy100:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_DX); }
	yy102:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_DY); }
	yy104:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_DZ); }
	yy106:
		yych = *++pos;
		switch (yych) {
			case 'm':
				goto yy136;
			default:
				goto yy33;
		}
	yy107:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy137;
			default:
				goto yy33;
		}
	yy108:
		yych = *++pos;
		switch (yych) {
			case 'c':
				goto yy139;
			default:
				goto yy33;
		}
	yy109:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_FY); }
	yy111:
		yych = *++pos;
		switch (yych) {
			case 'u':
				goto yy140;
			default:
				goto yy33;
		}
	yy112:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy141;
			default:
				goto yy33;
		}
	yy113:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy142;
			default:
				goto yy33;
		}
	yy114:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy143;
			default:
				goto yy33;
		}
	yy115:
		yych = *++pos;
		switch (yych) {
			case 'd':
				goto yy144;
			default:
				goto yy33;
		}
	yy116:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy145;
			default:
				goto yy33;
		}
	yy117:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy146;
			case 'e':
				goto yy147;
			default:
				goto yy33;
		}
	yy118:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_NU); }
	yy120:
		yych = *++pos;
		switch (yych) {
			case 's':
				goto yy148;
			default:
				goto yy33;
		}
	yy121:
		yych = *++pos;
		switch (yych) {
			case 'd':
				goto yy149;
			default:
				goto yy33;
		}
	yy122:
		yych = *++pos;
		switch (yych) {
			case 'f':
				goto yy150;
			default:
				goto yy33;
		}
	yy123:
		yych = *++pos;
		switch (yych) {
			case 'r':
				goto yy151;
			default:
				goto yy33;
		}
	yy124:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy152;
			default:
				goto yy33;
		}
	yy125:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy153;
			default:
				goto yy33;
		}
	yy126:
		yych = *++pos;
		switch (yych) {
			case 's':
				goto yy154;
			default:
				goto yy33;
		}
	yy127:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy155;
			default:
				goto yy34;
		}
	yy128:
		++pos;
		{ return lexerReturnProcedures(TT_NULL); }
	yy130:
		++pos;
		{ return lexerReturnProcedures(TT_TRUE); }
	yy132:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_V1_0); }
	yy134:
		yych = *++pos;
		switch (yych) {
			case 'o':
				goto yy157;
			default:
				goto yy33;
		}
	yy135:
		yych = *++pos;
		switch (yych) {
			case 'i':
				goto yy158;
			default:
				goto yy33;
		}
	yy136:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy159;
			default:
				goto yy33;
		}
	yy137:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_FEM); }
	yy139:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy160;
			default:
				goto yy33;
		}
	yy140:
		yych = *++pos;
		switch (yych) {
			case 'p':
				goto yy161;
			default:
				goto yy33;
		}
	yy141:
		yych = *++pos;
		switch (yych) {
			case 'h':
				goto yy162;
			default:
				goto yy33;
		}
	yy142:
		yych = *++pos;
		switch (yych) {
			case 'l':
				goto yy163;
			default:
				goto yy33;
		}
	yy143:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy164;
			default:
				goto yy33;
		}
	yy144:
		yych = *++pos;
		switch (yych) {
			case ' ':
				goto yy165;
			default:
				goto yy33;
		}
	yy145:
		yych = *++pos;
		switch (yych) {
			case 'r':
				goto yy166;
			default:
				goto yy33;
		}
	yy146:
		yych = *++pos;
		switch (yych) {
			case 'l':
				goto yy167;
			default:
				goto yy33;
		}
	yy147:
		yych = *++pos;
		switch (yych) {
			case ' ':
				goto yy168;
			case '"':
				goto yy169;
			case 's':
				goto yy171;
			default:
				goto yy33;
		}
	yy148:
		yych = *++pos;
		switch (yych) {
			case 'm':
				goto yy172;
			default:
				goto yy33;
		}
	yy149:
		yych = *++pos;
		switch (yych) {
			case 'r':
				goto yy173;
			default:
				goto yy33;
		}
	yy150:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy174;
			default:
				goto yy33;
		}
	yy151:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy175;
			default:
				goto yy33;
		}
	yy152:
		yych = *++pos;
		switch (yych) {
			case 'n':
				goto yy176;
			default:
				goto yy33;
		}
	yy153:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy177;
			default:
				goto yy33;
		}
	yy154:
		yych = *++pos;
		switch (yych) {
			case 'i':
				goto yy179;
			default:
				goto yy33;
		}
	yy155:
		++pos;
		{ return lexerReturnProcedures(TT_FALSE); }
	yy157:
		yych = *++pos;
		switch (yych) {
			case 'l':
				goto yy180;
			default:
				goto yy33;
		}
	yy158:
		yych = *++pos;
		switch (yych) {
			case 'n':
				goto yy181;
			default:
				goto yy33;
		}
	yy159:
		yych = *++pos;
		switch (yych) {
			case 'n':
				goto yy182;
			default:
				goto yy33;
		}
	yy160:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy183;
			case 's':
				goto yy185;
			default:
				goto yy33;
		}
	yy161:
		yych = *++pos;
		switch (yych) {
			case 's':
				goto yy186;
			default:
				goto yy33;
		}
	yy162:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy187;
			default:
				goto yy33;
		}
	yy163:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy188;
			default:
				goto yy33;
		}
	yy164:
		yych = *++pos;
		switch (yych) {
			case 'r':
				goto yy190;
			default:
				goto yy33;
		}
	yy165:
		yych = *++pos;
		switch (yych) {
			case 'p':
				goto yy191;
			default:
				goto yy33;
		}
	yy166:
		yych = *++pos;
		switch (yych) {
			case 'i':
				goto yy192;
			default:
				goto yy33;
		}
	yy167:
		yych = *++pos;
		switch (yych) {
			case ' ':
				goto yy193;
			default:
				goto yy33;
		}
	yy168:
		yych = *++pos;
		switch (yych) {
			case 'r':
				goto yy194;
			default:
				goto yy33;
		}
	yy169:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_NODE); }
	yy171:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy195;
			default:
				goto yy33;
		}
	yy172:
		yych = *++pos;
		switch (yych) {
			case '1':
				goto yy197;
			case '6':
				goto yy198;
			default:
				goto yy33;
		}
	yy173:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy199;
			default:
				goto yy33;
		}
	yy174:
		yych = *++pos;
		switch (yych) {
			case 'c':
				goto yy200;
			default:
				goto yy33;
		}
	yy175:
		yych = *++pos;
		switch (yych) {
			case 'h':
				goto yy201;
			default:
				goto yy33;
		}
	yy176:
		yych = *++pos;
		switch (yych) {
			case 'g':
				goto yy202;
			default:
				goto yy33;
		}
	yy177:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_TYPE); }
	yy179:
		yych = *++pos;
		switch (yych) {
			case 'o':
				goto yy203;
			default:
				goto yy33;
		}
	yy180:
		yych = *++pos;
		switch (yych) {
			case 'i':
				goto yy204;
			default:
				goto yy33;
		}
	yy181:
		yych = *++pos;
		switch (yych) {
			case ' ':
				goto yy205;
			default:
				goto yy33;
		}
	yy182:
		yych = *++pos;
		switch (yych) {
			case 't':
				goto yy206;
			default:
				goto yy33;
		}
	yy183:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_FORCE); }
	yy185:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy207;
			default:
				goto yy33;
		}
	yy186:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy209;
			default:
				goto yy33;
		}
	yy187:
		yych = *++pos;
		switch (yych) {
			case 'd':
				goto yy211;
			default:
				goto yy33;
		}
	yy188:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_LABEL); }
	yy190:
		yych = *++pos;
		switch (yych) {
			case ' ':
				goto yy212;
			default:
				goto yy33;
		}
	yy191:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy213;
			default:
				goto yy33;
		}
	yy192:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy214;
			default:
				goto yy33;
		}
	yy193:
		yych = *++pos;
		switch (yych) {
			case 'l':
				goto yy215;
			default:
				goto yy33;
		}
	yy194:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy216;
			default:
				goto yy33;
		}
	yy195:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_NODES); }
	yy197:
		yych = *++pos;
		switch (yych) {
			case '5':
				goto yy217;
			case '8':
				goto yy218;
			default:
				goto yy33;
		}
	yy198:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy219;
			default:
				goto yy33;
		}
	yy199:
		yych = *++pos;
		switch (yych) {
			case 'n':
				goto yy221;
			default:
				goto yy33;
		}
	yy200:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy222;
			default:
				goto yy33;
		}
	yy201:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy223;
			default:
				goto yy33;
		}
	yy202:
		yych = *++pos;
		switch (yych) {
			case 'l':
				goto yy224;
			default:
				goto yy33;
		}
	yy203:
		yych = *++pos;
		switch (yych) {
			case 'n':
				goto yy225;
			default:
				goto yy33;
		}
	yy204:
		yych = *++pos;
		switch (yych) {
			case 'd':
				goto yy226;
			default:
				goto yy33;
		}
	yy205:
		yych = *++pos;
		switch (yych) {
			case 'l':
				goto yy227;
			default:
				goto yy33;
		}
	yy206:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy228;
			case 's':
				goto yy230;
			default:
				goto yy33;
		}
	yy207:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_FORCE); }
	yy209:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_GROUPS); }
	yy211:
		yych = *++pos;
		switch (yych) {
			case 'r':
				goto yy231;
			default:
				goto yy33;
		}
	yy212:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy232;
			default:
				goto yy33;
		}
	yy213:
		yych = *++pos;
		switch (yych) {
			case 't':
				goto yy233;
			default:
				goto yy33;
		}
	yy214:
		yych = *++pos;
		switch (yych) {
			case 'l':
				goto yy234;
			default:
				goto yy33;
		}
	yy215:
		yych = *++pos;
		switch (yych) {
			case 'o':
				goto yy235;
			default:
				goto yy33;
		}
	yy216:
		yych = *++pos;
		switch (yych) {
			case 's':
				goto yy236;
			default:
				goto yy33;
		}
	yy217:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy237;
			default:
				goto yy33;
		}
	yy218:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy239;
			default:
				goto yy33;
		}
	yy219:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_PRISM6); }
	yy221:
		yych = *++pos;
		switch (yych) {
			case 'g':
				goto yy241;
			default:
				goto yy33;
		}
	yy222:
		yych = *++pos;
		switch (yych) {
			case ' ':
				goto yy242;
			default:
				goto yy33;
		}
	yy223:
		yych = *++pos;
		switch (yych) {
			case 'd':
				goto yy243;
			default:
				goto yy33;
		}
	yy224:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy244;
			default:
				goto yy33;
		}
	yy225:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy245;
			default:
				goto yy33;
		}
	yy226:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy247;
			default:
				goto yy33;
		}
	yy227:
		yych = *++pos;
		switch (yych) {
			case 'o':
				goto yy249;
			default:
				goto yy33;
		}
	yy228:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_ELEMENT); }
	yy230:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy250;
			default:
				goto yy33;
		}
	yy231:
		yych = *++pos;
		switch (yych) {
			case 'o':
				goto yy252;
			default:
				goto yy33;
		}
	yy232:
		yych = *++pos;
		switch (yych) {
			case 'l':
				goto yy253;
			default:
				goto yy33;
		}
	yy233:
		yych = *++pos;
		switch (yych) {
			case 't':
				goto yy254;
			default:
				goto yy33;
		}
	yy234:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy255;
			case 's':
				goto yy257;
			default:
				goto yy33;
		}
	yy235:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy258;
			default:
				goto yy33;
		}
	yy236:
		yych = *++pos;
		switch (yych) {
			case 't':
				goto yy259;
			default:
				goto yy33;
		}
	yy237:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_PRISM15); }
	yy239:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_PRISM18); }
	yy241:
		yych = *++pos;
		switch (yych) {
			case 'l':
				goto yy260;
			default:
				goto yy33;
		}
	yy242:
		yych = *++pos;
		switch (yych) {
			case 'l':
				goto yy261;
			default:
				goto yy33;
		}
	yy243:
		yych = *++pos;
		switch (yych) {
			case 'r':
				goto yy262;
			default:
				goto yy33;
		}
	yy244:
		yych = *++pos;
		switch (yych) {
			case '3':
				goto yy263;
			case '6':
				goto yy264;
			default:
				goto yy33;
		}
	yy245:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_VERSION); }
	yy247:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_3D_SOLID); }
	yy249:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy265;
			default:
				goto yy33;
		}
	yy250:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_ELEMENTS); }
	yy252:
		yych = *++pos;
		switch (yych) {
			case 'n':
				goto yy266;
			default:
				goto yy33;
		}
	yy253:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy267;
			default:
				goto yy33;
		}
	yy254:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy268;
			default:
				goto yy33;
		}
	yy255:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_MATERIAL); }
	yy257:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy269;
			default:
				goto yy33;
		}
	yy258:
		yych = *++pos;
		switch (yych) {
			case 'd':
				goto yy271;
			default:
				goto yy33;
		}
	yy259:
		yych = *++pos;
		switch (yych) {
			case 'r':
				goto yy272;
			default:
				goto yy33;
		}
	yy260:
		yych = *++pos;
		switch (yych) {
			case 'e':
				goto yy273;
			default:
				goto yy33;
		}
	yy261:
		yych = *++pos;
		switch (yych) {
			case 'o':
				goto yy274;
			default:
				goto yy33;
		}
	yy262:
		yych = *++pos;
		switch (yych) {
			case 'o':
				goto yy275;
			default:
				goto yy33;
		}
	yy263:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy276;
			default:
				goto yy33;
		}
	yy264:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy278;
			default:
				goto yy33;
		}
	yy265:
		yych = *++pos;
		switch (yych) {
			case 'd':
				goto yy280;
			default:
				goto yy33;
		}
	yy266:
		yych = *++pos;
		switch (yych) {
			case '2':
				goto yy281;
			case '8':
				goto yy282;
			default:
				goto yy33;
		}
	yy267:
		yych = *++pos;
		switch (yych) {
			case 's':
				goto yy283;
			default:
				goto yy33;
		}
	yy268:
		yych = *++pos;
		switch (yych) {
			case 'r':
				goto yy284;
			default:
				goto yy33;
		}
	yy269:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_MATERIALS); }
	yy271:
		yych = *++pos;
		switch (yych) {
			case 's':
				goto yy285;
			default:
				goto yy33;
		}
	yy272:
		yych = *++pos;
		switch (yych) {
			case 'i':
				goto yy286;
			default:
				goto yy33;
		}
	yy273:
		yych = *++pos;
		switch (yych) {
			case '4':
				goto yy287;
			case '8':
				goto yy288;
			case '9':
				goto yy289;
			default:
				goto yy33;
		}
	yy274:
		yych = *++pos;
		switch (yych) {
			case 'a':
				goto yy290;
			default:
				goto yy33;
		}
	yy275:
		yych = *++pos;
		switch (yych) {
			case 'n':
				goto yy291;
			default:
				goto yy33;
		}
	yy276:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_TRIANGLE3); }
	yy278:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_TRIANGLE6); }
	yy280:
		yych = *++pos;
		switch (yych) {
			case 's':
				goto yy292;
			default:
				goto yy33;
		}
	yy281:
		yych = *++pos;
		switch (yych) {
			case '0':
				goto yy293;
			case '7':
				goto yy294;
			default:
				goto yy33;
		}
	yy282:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy295;
			default:
				goto yy33;
		}
	yy283:
		yych = *++pos;
		switch (yych) {
			case 't':
				goto yy297;
			default:
				goto yy33;
		}
	yy284:
		yych = *++pos;
		switch (yych) {
			case 'n':
				goto yy298;
			default:
				goto yy33;
		}
	yy285:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy299;
			default:
				goto yy33;
		}
	yy286:
		yych = *++pos;
		switch (yych) {
			case 'c':
				goto yy301;
			default:
				goto yy33;
		}
	yy287:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy302;
			default:
				goto yy33;
		}
	yy288:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy304;
			default:
				goto yy33;
		}
	yy289:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy306;
			default:
				goto yy33;
		}
	yy290:
		yych = *++pos;
		switch (yych) {
			case 'd':
				goto yy308;
			default:
				goto yy33;
		}
	yy291:
		yych = *++pos;
		switch (yych) {
			case '1':
				goto yy309;
			case '4':
				goto yy310;
			default:
				goto yy33;
		}
	yy292:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy311;
			default:
				goto yy33;
		}
	yy293:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy313;
			default:
				goto yy33;
		}
	yy294:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy315;
			default:
				goto yy33;
		}
	yy295:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_HEXAHEDRON8); }
	yy297:
		yych = *++pos;
		switch (yych) {
			case 'i':
				goto yy317;
			default:
				goto yy33;
		}
	yy298:
		yych = *++pos;
		switch (yych) {
			case 's':
				goto yy318;
			default:
				goto yy33;
		}
	yy299:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_NODAL_LOADS); }
	yy301:
		yych = *++pos;
		switch (yych) {
			case 't':
				goto yy319;
			default:
				goto yy33;
		}
	yy302:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_QUADRANGLE4); }
	yy304:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_QUADRANGLE8); }
	yy306:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_QUADRANGLE9); }
	yy308:
		yych = *++pos;
		switch (yych) {
			case 's':
				goto yy320;
			default:
				goto yy33;
		}
	yy309:
		yych = *++pos;
		switch (yych) {
			case '0':
				goto yy321;
			default:
				goto yy33;
		}
	yy310:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy322;
			default:
				goto yy33;
		}
	yy311:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_DOMAIN_LOADS); }
	yy313:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_HEXAHEDRON20); }
	yy315:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_HEXAHEDRON27); }
	yy317:
		yych = *++pos;
		switch (yych) {
			case 'c':
				goto yy324;
			default:
				goto yy33;
		}
	yy318:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy325;
			default:
				goto yy33;
		}
	yy319:
		yych = *++pos;
		switch (yych) {
			case 'i':
				goto yy327;
			default:
				goto yy33;
		}
	yy320:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy328;
			default:
				goto yy33;
		}
	yy321:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy330;
			default:
				goto yy33;
		}
	yy322:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_TETRAHEDRON4); }
	yy324:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy332;
			default:
				goto yy33;
		}
	yy325:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_LOAD_PATTERNS); }
	yy327:
		yych = *++pos;
		switch (yych) {
			case 'o':
				goto yy334;
			default:
				goto yy33;
		}
	yy328:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_SURFACE_LOADS); }
	yy330:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_TETRAHEDRON10); }
	yy332:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_LINEAR_ELASTIC); }
	yy334:
		yych = *++pos;
		switch (yych) {
			case 'n':
				goto yy335;
			default:
				goto yy33;
		}
	yy335:
		yych = *++pos;
		switch (yych) {
			case 's':
				goto yy336;
			default:
				goto yy33;
		}
	yy336:
		yych = *++pos;
		switch (yych) {
			case '"':
				goto yy337;
			default:
				goto yy33;
		}
	yy337:
		++pos;
		{ return lexerReturnProcedures(TT_LABEL_NODE_RESTRICTIONS); }
	}

#undef YYFILL
}

void FemJsonParser::setParserTable() {
	table[NT_LABEL][TT_LABEL_LABEL] = PR_LABEL;
	table[NT_LABEL_SET][TT_VALUE_SEPARATOR] = PR_LABEL_SET;
	table[NT_LABEL_SET][TT_OBJECT_CLOSE] = PR_LABEL_SET;

	table[NT_VECTOR3D][TT_ARRAY_OPEN] = PR_VECTOR3D;
	table[NT_VECTOR3D_SET][TT_VALUE_SEPARATOR] = PR_VECTOR3D_SET;
	table[NT_VECTOR3D_SET][TT_ARRAY_CLOSE] = PR_VECTOR3D_SET;
	table[NT_VECTOR3D_SET][TT_OBJECT_CLOSE] = PR_VECTOR3D_SET;

	table[NT_REFERENCE][TT_NATURAL_NUMBER] = PR_REFERENCE_1;
	//	table	[NT_REFERENCE]		[TT_VALUE_SEPARATOR]	=
	// PR_REFERENCE_ERROR;	// error state

	table[NT_REFERENCE_SET][TT_VALUE_SEPARATOR] = PR_REFERENCE_SET;
	table[NT_REFERENCE_SET][TT_ARRAY_CLOSE] = PR_REFERENCE_SET;
	table[NT_REFERENCE_SET][TT_OBJECT_CLOSE] = PR_REFERENCE_SET;

	table[NT_REFERENCE_LIST][TT_ARRAY_OPEN] = PR_REFERENCE_LIST_1;

	table[NT_REFERENCE_FOLLOW][TT_VALUE_SEPARATOR] = PR_REFERENCE_FOLLOW_1;
	table[NT_REFERENCE_FOLLOW][TT_ARRAY_CLOSE] = PR_REFERENCE_FOLLOW_2;

	table[NT_MULTI_REFERENCE][TT_NATURAL_NUMBER] = PR_MULTI_REFERENCE_1;
	table[NT_MULTI_REFERENCE][TT_ARRAY_OPEN] = PR_MULTI_REFERENCE_2;

	table[NT_MULTI_REFERENCE_SET][TT_VALUE_SEPARATOR] = PR_MULTI_REFERENCE_SET;
	table[NT_MULTI_REFERENCE_SET][TT_ARRAY_CLOSE] = PR_MULTI_REFERENCE_SET;
	table[NT_MULTI_REFERENCE_SET][TT_OBJECT_CLOSE] = PR_MULTI_REFERENCE_SET;

	table[NT_BOOLEAN][TT_TRUE] = PR_BOOLEAN_TRUE;
	table[NT_BOOLEAN][TT_FALSE] = PR_BOOLEAN_FALSE;

	table[NT_NUMBER][TT_FLOAT_NUMBER] = PR_NUMBER_1;
	table[NT_NUMBER][TT_NATURAL_NUMBER] = PR_NUMBER_2;

	table[NT_FLOAT_SET][TT_VALUE_SEPARATOR] = PR_FLOAT_SET;
	table[NT_FLOAT_SET][TT_ARRAY_CLOSE] = PR_FLOAT_SET;
	table[NT_FLOAT_SET][TT_OBJECT_CLOSE] = PR_FLOAT_SET;

	table[NT_INT_TO_FLOAT_SET][TT_VALUE_SEPARATOR] = PR_INT_TO_FLOAT_SET;
	table[NT_INT_TO_FLOAT_SET][TT_ARRAY_CLOSE] = PR_INT_TO_FLOAT_SET;
	table[NT_INT_TO_FLOAT_SET][TT_OBJECT_CLOSE] = PR_INT_TO_FLOAT_SET;

	table[NT_START][TT_OBJECT_OPEN] = PR_START_1;
	table[NT_START][TT_EOF] = PR_START_2;

	table[NT_DOCUMENT][TT_OBJECT_OPEN] = PR_DOCUMENT_1;

	table[NT_HEADER][TT_LABEL_FEM] = PR_HEADER_1;
	table[NT_FORMAT_VERSION][TT_LABEL_VERSION] = PR_FORMAT_VERSION_1;

	table[NT_MODEL_TYPE][TT_LABEL_TYPE] = PR_MODEL_TYPE_1;
	table[NT_MODEL_TYPE_SET][TT_OBJECT_CLOSE] = PR_MODEL_TYPE_SET;

	table[NT_MATERIAL_LIST][TT_LABEL_MATERIALS] = PR_MATERIAL_LIST_1;
	table[NT_MATERIAL][TT_OBJECT_OPEN] = PR_MATERIAL_1;
	table[NT_MATERIAL_TYPE][TT_LABEL_TYPE] = PR_MATERIAL_TYPE_1;
	table[NT_YOUNG_MODULUS][TT_LABEL_E] = PR_YOUNG_MODULUS_1;
	table[NT_YOUNG_MODULUS_SET][TT_VALUE_SEPARATOR] = PR_YOUNG_MODULUS_SET;
	table[NT_POISSON_COEFFICIENT][TT_LABEL_NU] = PR_POISSON_COEFFICIENT_1;
	table[NT_POISSON_COEFFICIENT_SET][TT_VALUE_SEPARATOR] = PR_POISSON_COEFFICIENT_SET;
	table[NT_ELASTIC_LIMIT][TT_LABEL_FY] = PR_ELASTIC_LIMIT_1;
	table[NT_ELASTIC_LIMIT_SET][TT_OBJECT_CLOSE] = PR_ELASTIC_LIMIT_SET;
	table[NT_MATERIAL_SET][TT_VALUE_SEPARATOR] = PR_MATERIAL_SET;
	table[NT_MATERIAL_SET][TT_ARRAY_CLOSE] = PR_MATERIAL_SET;
	table[NT_MATERIAL_FOLLOW][TT_VALUE_SEPARATOR] = PR_MATERIAL_FOLLOW_1;
	table[NT_MATERIAL_FOLLOW][TT_ARRAY_CLOSE] = PR_MATERIAL_FOLLOW_2;

	table[NT_NODE_LIST][TT_LABEL_NODES] = PR_NODE_LIST_1;
	table[NT_NODE][TT_ARRAY_OPEN] = PR_NODE_1;
	table[NT_NODE_SET][TT_VALUE_SEPARATOR] = PR_NODE_SET;
	table[NT_NODE_SET][TT_ARRAY_CLOSE] = PR_NODE_SET;
	table[NT_NODE_FOLLOW][TT_VALUE_SEPARATOR] = PR_NODE_FOLLOW_1;
	table[NT_NODE_FOLLOW][TT_ARRAY_CLOSE] = PR_NODE_FOLLOW_2;

	table[NT_ELEMENT_LIST][TT_LABEL_ELEMENTS] = PR_ELEMENT_LIST_1;
	table[NT_ELEMENT][TT_OBJECT_OPEN] = PR_ELEMENT_1;
	table[NT_ELEMENT_SET][TT_OBJECT_CLOSE] = PR_ELEMENT_SET_1;

	table[NT_ELEMENT_TYPE][TT_LABEL_HEXAHEDRON8] = PR_ELEMENT_HEXAHEDRON8_1;
	table[NT_ELEMENT_TYPE][TT_LABEL_HEXAHEDRON20] = PR_ELEMENT_HEXAHEDRON20_1;
	table[NT_ELEMENT_TYPE][TT_LABEL_HEXAHEDRON27] = PR_ELEMENT_HEXAHEDRON27_1;
	table[NT_ELEMENT_TYPE][TT_LABEL_TETRAHEDRON4] = PR_ELEMENT_TETRAHEDRON4_1;
	table[NT_ELEMENT_TYPE][TT_LABEL_TETRAHEDRON10] = PR_ELEMENT_TETRAHEDRON10_1;
	table[NT_ELEMENT_TYPE][TT_LABEL_PRISM6] = PR_ELEMENT_PRISM6_1;
	table[NT_ELEMENT_TYPE][TT_LABEL_PRISM15] = PR_ELEMENT_PRISM15_1;
	table[NT_ELEMENT_TYPE][TT_LABEL_PRISM18] = PR_ELEMENT_PRISM18_1;

	table[NT_ELEMENT_HEXAHEDRON8][TT_LABEL_HEXAHEDRON8] = PR_ELEMENT_HEXAHEDRON8_1;
	table[NT_ELEMENT_HEXAHEDRON20][TT_LABEL_HEXAHEDRON20] = PR_ELEMENT_HEXAHEDRON20_1;
	table[NT_ELEMENT_HEXAHEDRON27][TT_LABEL_HEXAHEDRON27] = PR_ELEMENT_HEXAHEDRON27_1;
	table[NT_ELEMENT_TETRAHEDRON4][TT_LABEL_TETRAHEDRON4] = PR_ELEMENT_TETRAHEDRON4_1;
	table[NT_ELEMENT_TETRAHEDRON10][TT_LABEL_TETRAHEDRON10] = PR_ELEMENT_TETRAHEDRON10_1;
	table[NT_ELEMENT_PRISM6][TT_LABEL_PRISM6] = PR_ELEMENT_PRISM6_1;
	table[NT_ELEMENT_PRISM15][TT_LABEL_PRISM15] = PR_ELEMENT_PRISM15_1;
	table[NT_ELEMENT_PRISM18][TT_LABEL_PRISM18] = PR_ELEMENT_PRISM18_1;

	table[NT_ELEMENT_HEXAHEDRON8_SET][TT_VALUE_SEPARATOR] = PR_ELEMENT_HEXAHEDRON8_SET;
	table[NT_ELEMENT_HEXAHEDRON8_SET][TT_OBJECT_CLOSE] = PR_ELEMENT_HEXAHEDRON8_SET;
	table[NT_ELEMENT_HEXAHEDRON20_SET][TT_VALUE_SEPARATOR] = PR_ELEMENT_HEXAHEDRON20_SET;
	table[NT_ELEMENT_HEXAHEDRON20_SET][TT_OBJECT_CLOSE] = PR_ELEMENT_HEXAHEDRON20_SET;
	table[NT_ELEMENT_HEXAHEDRON27_SET][TT_VALUE_SEPARATOR] = PR_ELEMENT_HEXAHEDRON27_SET;
	table[NT_ELEMENT_HEXAHEDRON27_SET][TT_OBJECT_CLOSE] = PR_ELEMENT_HEXAHEDRON27_SET;
	table[NT_ELEMENT_TETRAHEDRON4_SET][TT_VALUE_SEPARATOR] = PR_ELEMENT_TETRAHEDRON4_SET;
	table[NT_ELEMENT_TETRAHEDRON4_SET][TT_OBJECT_CLOSE] = PR_ELEMENT_TETRAHEDRON4_SET;
	table[NT_ELEMENT_TETRAHEDRON10_SET][TT_VALUE_SEPARATOR] = PR_ELEMENT_TETRAHEDRON10_SET;
	table[NT_ELEMENT_TETRAHEDRON10_SET][TT_OBJECT_CLOSE] = PR_ELEMENT_TETRAHEDRON10_SET;
	table[NT_ELEMENT_PRISM6_SET][TT_VALUE_SEPARATOR] = PR_ELEMENT_PRISM6_SET;
	table[NT_ELEMENT_PRISM6_SET][TT_OBJECT_CLOSE] = PR_ELEMENT_PRISM6_SET;
	table[NT_ELEMENT_PRISM15_SET][TT_VALUE_SEPARATOR] = PR_ELEMENT_PRISM15_SET;
	table[NT_ELEMENT_PRISM15_SET][TT_OBJECT_CLOSE] = PR_ELEMENT_PRISM15_SET;
	table[NT_ELEMENT_PRISM18_SET][TT_VALUE_SEPARATOR] = PR_ELEMENT_PRISM18_SET;
	table[NT_ELEMENT_PRISM18_SET][TT_OBJECT_CLOSE] = PR_ELEMENT_PRISM18_SET;

	table[NT_ELEMENT_TYPE_FOLLOW][TT_VALUE_SEPARATOR] = PR_ELEMENT_TYPE_FOLLOW_1;
	table[NT_ELEMENT_TYPE_FOLLOW][TT_OBJECT_CLOSE] = PR_ELEMENT_TYPE_FOLLOW_2;
	table[NT_ELEMENT_MATERIAL][TT_LABEL_MATERIAL] = PR_ELEMENT_MATERIAL_1;
	table[NT_ELEMENT_MATERIAL_SET][TT_OBJECT_CLOSE] = PR_ELEMENT_MATERIAL_SET_1;
	table[NT_ELEMENT_FOLLOW][TT_VALUE_SEPARATOR] = PR_ELEMENT_FOLLOW_1;
	table[NT_ELEMENT_FOLLOW][TT_ARRAY_CLOSE] = PR_ELEMENT_FOLLOW_2;

	table[NT_ELEMENT_LIST_FOLLOW][TT_VALUE_SEPARATOR] = PR_ELEMENT_LIST_FOLLOW_1;
	table[NT_ELEMENT_LIST_FOLLOW][TT_OBJECT_CLOSE] = PR_ELEMENT_LIST_FOLLOW_2;

	table[NT_EXTRA_DEFINITIONS][TT_LABEL_GROUPS] = PR_EXTRA_DEFINITIONS_1;
	table[NT_EXTRA_DEFINITIONS][TT_LABEL_NODE_RESTRICTIONS] = PR_EXTRA_DEFINITIONS_2;
	table[NT_EXTRA_DEFINITIONS][TT_LABEL_LOAD_PATTERNS] = PR_EXTRA_DEFINITIONS_3;

	table[NT_GROUPS_LIST][TT_LABEL_GROUPS] = PR_GROUPS_LIST_1;
	table[NT_GROUP_TYPE][TT_LABEL_NODES] = PR_GROUP_TYPE_1;
	table[NT_GROUP_TYPE][TT_LABEL_ELEMENTS] = PR_GROUP_TYPE_2;

	table[NT_GROUPS_LIST_FOLLOW][TT_VALUE_SEPARATOR] = PR_GROUPS_LIST_FOLLOW_1;
	table[NT_GROUPS_LIST_FOLLOW][TT_OBJECT_CLOSE] = PR_GROUPS_LIST_FOLLOW_2;

	table[NT_GROUPS_LIST_FOLLOW_FOLLOW][TT_LABEL_NODE_RESTRICTIONS] = PR_GROUPS_LIST_FOLLOW_FOLLOW_1;
	table[NT_GROUPS_LIST_FOLLOW_FOLLOW][TT_LABEL_LOAD_PATTERNS] = PR_GROUPS_LIST_FOLLOW_FOLLOW_2;

	table[NT_NODE_GROUP_LIST][TT_LABEL_NODES] = PR_NODE_GROUP_LIST_1;
	table[NT_NODE_GROUP_LIST_FOLLOW][TT_VALUE_SEPARATOR] = PR_NODE_GROUP_LIST_FOLLOW_1;
	table[NT_NODE_GROUP_LIST_FOLLOW][TT_OBJECT_CLOSE] = PR_NODE_GROUP_LIST_FOLLOW_2;

	table[NT_NODE_GROUP][TT_OBJECT_OPEN] = PR_NODE_GROUP_1;

	table[NT_NODE_GROUP_SET][TT_VALUE_SEPARATOR] = PR_NODE_GROUP_SET;
	table[NT_NODE_GROUP_SET][TT_ARRAY_CLOSE] = PR_NODE_GROUP_SET;

	table[NT_NODE_GROUP_FOLLOW][TT_VALUE_SEPARATOR] = PR_NODE_GROUP_FOLLOW_1;
	table[NT_NODE_GROUP_FOLLOW][TT_ARRAY_CLOSE] = PR_NODE_GROUP_FOLLOW_2;

	table[NT_NODE_GROUP_FOLLOW_FOLLOW][TT_OBJECT_OPEN] = PR_NODE_GROUP_FOLLOW_FOLLOW_1;

	table[NT_ELEMENT_GROUP_LIST][TT_LABEL_ELEMENTS] = PR_ELEMENT_GROUP_LIST_1;
	table[NT_ELEMENT_GROUP_LIST_FOLLOW][TT_OBJECT_CLOSE] = PR_ELEMENT_GROUP_LIST_FOLLOW_1;
	table[NT_ELEMENT_GROUP][TT_OBJECT_OPEN] = PR_ELEMENT_GROUP_1;
	table[NT_ELEMENT_GROUP_SET][TT_VALUE_SEPARATOR] = PR_ELEMENT_GROUP_SET;
	table[NT_ELEMENT_GROUP_SET][TT_ARRAY_CLOSE] = PR_ELEMENT_GROUP_SET;
	table[NT_ELEMENT_GROUP_FOLLOW][TT_VALUE_SEPARATOR] = PR_ELEMENT_GROUP_FOLLOW_1;
	table[NT_ELEMENT_GROUP_FOLLOW][TT_ARRAY_CLOSE] = PR_ELEMENT_GROUP_FOLLOW_2;

	table[NT_ELEMENT_GROUP_FOLLOW_FOLLOW][TT_OBJECT_OPEN] = PR_ELEMENT_GROUP_FOLLOW_FOLLOW_1;

	table[NT_NODE_RESTRICTIONS_LIST][TT_LABEL_NODE_RESTRICTIONS] = PR_NODE_RESTRICTIONS_LIST_1;

	table[NT_NODE_RESTRICTIONS_LIST_FOLLOW][TT_VALUE_SEPARATOR] = PR_NODE_RESTRICTIONS_LIST_FOLLOW_1;
	table[NT_NODE_RESTRICTIONS_LIST_FOLLOW][TT_OBJECT_CLOSE] = PR_NODE_RESTRICTIONS_LIST_FOLLOW_2;
	table[NT_NODE_RESTRICTIONS_LIST_FOLLOW_FOLLOW][TT_LABEL_LOAD_PATTERNS] = PR_NODE_RESTRICTIONS_LIST_FOLLOW_FOLLOW_1;

	table[NT_NODE_RESTRICTION][TT_OBJECT_OPEN] = PR_NODE_RESTRICTION_1;

	table[NT_NODE_REFERENCE][TT_LABEL_NODE] = PR_NODE_REFERENCE_1;
	table[NT_NODE_REFERENCE_SET][TT_VALUE_SEPARATOR] = PR_NODE_REFERENCE_SET;

	table[NT_NODE_DOF][TT_LABEL_DX] = PR_NODE_DOF_1;
	table[NT_NODE_DOF][TT_LABEL_DY] = PR_NODE_DOF_2;
	table[NT_NODE_DOF][TT_LABEL_DZ] = PR_NODE_DOF_3;
	table[NT_NODE_DOF_DX][TT_LABEL_DX] = PR_NODE_DOF_DX_1;

	table[NT_NODE_DOF_DX_SET][TT_VALUE_SEPARATOR] = PR_NODE_DOF_DX_SET;
	table[NT_NODE_DOF_DX_SET][TT_OBJECT_CLOSE] = PR_NODE_DOF_DX_SET;
	table[NT_NODE_DOF_DX_FOLLOW][TT_VALUE_SEPARATOR] = PR_NODE_DOF_DX_FOLLOW_1;
	table[NT_NODE_DOF_DX_FOLLOW][TT_OBJECT_CLOSE] = PR_NODE_DOF_DX_FOLLOW_2;

	table[NT_NODE_DOF_DX_FOLLOW_FOLLOW][TT_LABEL_DY] = PR_NODE_DOF_DX_FOLLOW_FOLLOW_1;
	table[NT_NODE_DOF_DX_FOLLOW_FOLLOW][TT_LABEL_DZ] = PR_NODE_DOF_DX_FOLLOW_FOLLOW_2;
	table[NT_NODE_DOF_DX_FOLLOW_FOLLOW][TT_OBJECT_CLOSE] = PR_NODE_DOF_DX_FOLLOW_FOLLOW_3;

	table[NT_NODE_DOF_DY][TT_LABEL_DY] = PR_NODE_DOF_DY_1;
	table[NT_NODE_DOF_DY_SET][TT_VALUE_SEPARATOR] = PR_NODE_DOF_DY_SET;
	table[NT_NODE_DOF_DY_SET][TT_OBJECT_CLOSE] = PR_NODE_DOF_DY_SET;
	table[NT_NODE_DOF_DY_FOLLOW][TT_VALUE_SEPARATOR] = PR_NODE_DOF_DY_FOLLOW_1;
	table[NT_NODE_DOF_DY_FOLLOW][TT_OBJECT_CLOSE] = PR_NODE_DOF_DY_FOLLOW_2;
	table[NT_NODE_DOF_DY_FOLLOW_FOLLOW][TT_LABEL_DZ] = PR_NODE_DOF_DY_FOLLOW_FOLLOW_1;
	table[NT_NODE_DOF_DY_FOLLOW_FOLLOW][TT_OBJECT_CLOSE] = PR_NODE_DOF_DY_FOLLOW_FOLLOW_2;

	table[NT_NODE_DOF_DZ][TT_LABEL_DZ] = PR_NODE_DOF_DZ_1;
	table[NT_NODE_DOF_DZ_SET][TT_OBJECT_CLOSE] = PR_NODE_DOF_DZ_SET;
	table[NT_NODE_DOF_DZ_FOLLOW][TT_OBJECT_CLOSE] = PR_NODE_DOF_DZ_FOLLOW_1;
	table[NT_NODE_DOF_DZ_FOLLOW_FOLLOW][TT_OBJECT_CLOSE] = PR_NODE_DOF_DZ_FOLLOW_FOLLOW_1;

	table[NT_NODE_RESTRICTION_SET][TT_VALUE_SEPARATOR] = PR_NODE_RESTRICTION_SET;
	table[NT_NODE_RESTRICTION_SET][TT_ARRAY_CLOSE] = PR_NODE_RESTRICTION_SET;
	table[NT_NODE_RESTRICTION_FOLLOW][TT_VALUE_SEPARATOR] = PR_NODE_RESTRICTION_FOLLOW_1;
	table[NT_NODE_RESTRICTION_FOLLOW][TT_ARRAY_CLOSE] = PR_NODE_RESTRICTION_FOLLOW_2;

	table[NT_LOAD_PATTERNS_LIST][TT_LABEL_LOAD_PATTERNS] = PR_LOAD_PATTERNS_LIST_1;
	table[NT_LOAD_PATTERN][TT_OBJECT_OPEN] = PR_LOAD_PATTERN_1;

	table[NT_LOAD_PATTERN_SET][TT_VALUE_SEPARATOR] = PR_LOAD_PATTERN_SET;
	table[NT_LOAD_PATTERN_SET][TT_ARRAY_CLOSE] = PR_LOAD_PATTERN_SET;

	table[NT_LOAD_PATTERN_LABEL_FOLLOW][TT_LABEL_NODAL_LOADS] = PR_LOAD_PATTERN_LABEL_FOLLOW_1;
	table[NT_LOAD_PATTERN_LABEL_FOLLOW][TT_LABEL_SURFACE_LOADS] = PR_LOAD_PATTERN_LABEL_FOLLOW_2;
	table[NT_LOAD_PATTERN_LABEL_FOLLOW][TT_LABEL_DOMAIN_LOADS] = PR_LOAD_PATTERN_LABEL_FOLLOW_3;
	table[NT_NODAL_LOADS_LIST][TT_LABEL_NODAL_LOADS] = PR_NODAL_LOADS_LIST_1;
	table[NT_NODAL_LOAD][TT_OBJECT_OPEN] = PR_NODAL_LOAD_1;
	table[NT_NODAL_LOAD_SET][TT_VALUE_SEPARATOR] = PR_NODAL_LOAD_SET;
	table[NT_NODAL_LOAD_SET][TT_ARRAY_CLOSE] = PR_NODAL_LOAD_SET;

	table[NT_NODAL_LOAD_FOLLOW][TT_VALUE_SEPARATOR] = PR_NODAL_LOAD_FOLLOW_1;
	table[NT_NODAL_LOAD_FOLLOW][TT_ARRAY_CLOSE] = PR_NODAL_LOAD_FOLLOW_2;
	table[NT_NODAL_LOAD_FORCE][TT_LABEL_FORCE] = PR_NODAL_LOAD_FORCE_1;
	table[NT_NODAL_LOADS_LIST_FOLLOW][TT_VALUE_SEPARATOR] = PR_NODAL_LOADS_LIST_FOLLOW_1;
	table[NT_NODAL_LOADS_LIST_FOLLOW][TT_OBJECT_CLOSE] = PR_NODAL_LOADS_LIST_FOLLOW_2;
	table[NT_SURFACE_LOADS_LIST][TT_LABEL_SURFACE_LOADS] = PR_SURFACE_LOADS_LIST_1;
	table[NT_SURFACE_LOAD][TT_OBJECT_OPEN] = PR_SURFACE_LOAD_1;
	table[NT_SURFACE_LOAD_TYPE][TT_LABEL_TRIANGLE3] = PR_SURFACE_LOAD_TYPE_1;
	table[NT_SURFACE_LOAD_TYPE][TT_LABEL_TRIANGLE6] = PR_SURFACE_LOAD_TYPE_2;
	table[NT_SURFACE_LOAD_TYPE][TT_LABEL_QUADRANGLE4] = PR_SURFACE_LOAD_TYPE_3;
	table[NT_SURFACE_LOAD_TYPE][TT_LABEL_QUADRANGLE8] = PR_SURFACE_LOAD_TYPE_4;
	table[NT_SURFACE_LOAD_TYPE][TT_LABEL_QUADRANGLE9] = PR_SURFACE_LOAD_TYPE_5;
	table[NT_SURFACE_LOAD_SET][TT_VALUE_SEPARATOR] = PR_SURFACE_LOAD_SET;
	table[NT_SURFACE_LOAD_SET][TT_ARRAY_CLOSE] = PR_SURFACE_LOAD_SET;

	table[NT_SURFACE_TRIANGLE3_NODES][TT_LABEL_NODES] = PR_SURFACE_TRIANGLE3_NODES_1;
	table[NT_SURFACE_TRIANGLE6_NODES][TT_LABEL_NODES] = PR_SURFACE_TRIANGLE6_NODES_1;
	table[NT_SURFACE_QUADRANGLE4_NODES][TT_LABEL_NODES] = PR_SURFACE_QUADRANGLE4_NODES_1;
	table[NT_SURFACE_QUADRANGLE8_NODES][TT_LABEL_NODES] = PR_SURFACE_QUADRANGLE8_NODES_1;
	table[NT_SURFACE_QUADRANGLE9_NODES][TT_LABEL_NODES] = PR_SURFACE_QUADRANGLE9_NODES_1;

	table[NT_SURFACE_TRIANGLE3_FORCES][TT_LABEL_FORCE] = PR_SURFACE_TRIANGLE3_FORCES_1;
	table[NT_SURFACE_TRIANGLE6_FORCES][TT_LABEL_FORCE] = PR_SURFACE_TRIANGLE6_FORCES_1;
	table[NT_SURFACE_QUADRANGLE4_FORCES][TT_LABEL_FORCE] = PR_SURFACE_QUADRANGLE4_FORCES_1;
	table[NT_SURFACE_QUADRANGLE8_FORCES][TT_LABEL_FORCE] = PR_SURFACE_QUADRANGLE8_FORCES_1;
	table[NT_SURFACE_QUADRANGLE9_FORCES][TT_LABEL_FORCE] = PR_SURFACE_QUADRANGLE9_FORCES_1;

	table[NT_SURFACE_LOADS_LIST_FOLLOW][TT_VALUE_SEPARATOR] = PR_SURFACE_LOADS_LIST_FOLLOW_1;
	table[NT_SURFACE_LOADS_LIST_FOLLOW][TT_OBJECT_CLOSE] = PR_SURFACE_LOADS_LIST_FOLLOW_2;

	table[NT_SURFACE_LOADS_LIST_FOLLOW_FOLLOW][TT_LABEL_DOMAIN_LOADS] = PR_SURFACE_LOADS_LIST_FOLLOW_FOLLOW_1;

	table[NT_SURFACE_LOAD_FOLLOW][TT_VALUE_SEPARATOR] = PR_SURFACE_LOAD_FOLLOW_1;
	table[NT_SURFACE_LOAD_FOLLOW][TT_ARRAY_CLOSE] = PR_SURFACE_LOAD_FOLLOW_2;
	table[NT_DOMAIN_LOADS_LIST][TT_LABEL_DOMAIN_LOADS] = PR_DOMAIN_LOADS_LIST_1;
	table[NT_DOMAIN_LOADS_LIST_FOLLOW][TT_OBJECT_CLOSE] = PR_DOMAIN_LOADS_LIST_FOLLOW_1;
	table[NT_DOMAIN_LOAD][TT_OBJECT_OPEN] = PR_DOMAIN_LOAD_1;
	table[NT_DOMAIN_LOAD_SET][TT_VALUE_SEPARATOR] = PR_DOMAIN_LOAD_SET;
	table[NT_DOMAIN_LOAD_SET][TT_ARRAY_CLOSE] = PR_DOMAIN_LOAD_SET;
	table[NT_ELEMENT_REFERENCE][TT_LABEL_ELEMENT] = PR_ELEMENT_REFERENCE_1;
	table[NT_DOMAIN_FORCE][TT_LABEL_FORCE] = PR_DOMAIN_FORCE_1;
	table[NT_DOMAIN_LOAD_FOLLOW][TT_VALUE_SEPARATOR] = PR_DOMAIN_LOAD_FOLLOW_1;
	table[NT_DOMAIN_LOAD_FOLLOW][TT_ARRAY_CLOSE] = PR_DOMAIN_LOAD_FOLLOW_2;

	table[NT_NODAL_LOADS_LIST_FOLLOW_FOLLOW][TT_LABEL_SURFACE_LOADS] = PR_NODAL_LOADS_LIST_FOLLOW_FOLLOW_1;
	table[NT_NODAL_LOADS_LIST_FOLLOW_FOLLOW][TT_LABEL_DOMAIN_LOADS] = PR_NODAL_LOADS_LIST_FOLLOW_FOLLOW_2;
	table[NT_LOAD_PATTERN_FOLLOW][TT_VALUE_SEPARATOR] = PR_LOAD_PATTERN_FOLLOW_1;
	table[NT_LOAD_PATTERN_FOLLOW][TT_ARRAY_CLOSE] = PR_LOAD_PATTERN_FOLLOW_2;
	table[NT_LOAD_PATTERNS_LIST_FOLLOW][TT_OBJECT_CLOSE] = PR_LOAD_PATTERNS_LIST_FOLLOW_1;
}

enum FemJsonParser::TerminalTokens FemJsonParser::lexerReturnProcedures(TerminalTokens tt) {
	switch (tt) {
		case TT_TEXT_STRING:
			temp_token.assign(tok + 1, pos - tok - 2);
			return TT_TEXT_STRING;
			break;

		case TT_NATURAL_NUMBER:
			temp_token.assign(tok, pos - tok);
			return TT_NATURAL_NUMBER;
			break;

		case TT_FLOAT_NUMBER:
			temp_token.assign(tok, pos - tok);
			return TT_FLOAT_NUMBER;
			break;

		case TT_OBJECT_OPEN:
			return TT_OBJECT_OPEN;
			break;
		case TT_OBJECT_CLOSE:
			return TT_OBJECT_CLOSE;
			break;
		case TT_ARRAY_OPEN:
			return TT_ARRAY_OPEN;
			break;
		case TT_ARRAY_CLOSE:
			return TT_ARRAY_CLOSE;
			break;
		case TT_NAME_SEPARATOR:
			return TT_NAME_SEPARATOR;
			break;
		case TT_VALUE_SEPARATOR:
			return TT_VALUE_SEPARATOR;
			break;
		case TT_TRUE:
			temp_bool = true;
			return TT_TRUE;
			break;
		case TT_FALSE:
			temp_bool = false;
			return TT_FALSE;
			break;
		case TT_NULL:
			return TT_NULL;
			break;

		case TT_LABEL_LABEL:
			return TT_LABEL_LABEL;
			break;

		case TT_LABEL_FEM:
			return TT_LABEL_FEM;
			break;

		case TT_LABEL_VERSION:
			return TT_LABEL_VERSION;
			break;
		case TT_LABEL_V1_0:
			return TT_LABEL_V1_0;
			break;
		case TT_LABEL_TYPE:
			return TT_LABEL_TYPE;
			break;
		case TT_LABEL_3D_SOLID:
			return TT_LABEL_3D_SOLID;
			break;
		case TT_LABEL_MATERIALS:
			return TT_LABEL_MATERIALS;
			break;
		case TT_LABEL_E:
			return TT_LABEL_E;
			break;
		case TT_LABEL_NU:
			return TT_LABEL_NU;
			break;
		case TT_LABEL_FY:
			return TT_LABEL_FY;
			break;
		case TT_LABEL_LINEAR_ELASTIC:
			return TT_LABEL_LINEAR_ELASTIC;
			break;
		case TT_LABEL_NODES:
			return TT_LABEL_NODES;
			break;
		case TT_LABEL_ELEMENTS:
			return TT_LABEL_ELEMENTS;
			break;
		case TT_LABEL_TETRAHEDRON4:
			return TT_LABEL_TETRAHEDRON4;
			break;
		case TT_LABEL_TETRAHEDRON10:
			return TT_LABEL_TETRAHEDRON10;
			break;
		case TT_LABEL_HEXAHEDRON8:
			return TT_LABEL_HEXAHEDRON8;
			break;
		case TT_LABEL_HEXAHEDRON20:
			return TT_LABEL_HEXAHEDRON20;
			break;
		case TT_LABEL_HEXAHEDRON27:
			return TT_LABEL_HEXAHEDRON27;
			break;
		case TT_LABEL_PRISM6:
			return TT_LABEL_PRISM6;
			break;
		case TT_LABEL_PRISM15:
			return TT_LABEL_PRISM15;
			break;
		case TT_LABEL_PRISM18:
			return TT_LABEL_PRISM18;
			break;
		case TT_LABEL_MATERIAL:
			return TT_LABEL_MATERIAL;
			break;
		case TT_LABEL_GROUPS:
			return TT_LABEL_GROUPS;
			break;
		case TT_LABEL_NODE_RESTRICTIONS:
			return TT_LABEL_NODE_RESTRICTIONS;
			break;
		case TT_LABEL_LOAD_PATTERNS:
			return TT_LABEL_LOAD_PATTERNS;
			break;
		case TT_LABEL_NODE:
			return TT_LABEL_NODE;
			break;
		case TT_LABEL_DX:
			return TT_LABEL_DX;
			break;
		case TT_LABEL_DY:
			return TT_LABEL_DY;
			break;
		case TT_LABEL_DZ:
			return TT_LABEL_DZ;
			break;
		case TT_LABEL_NODAL_LOADS:
			return TT_LABEL_NODAL_LOADS;
			break;
		case TT_LABEL_SURFACE_LOADS:
			return TT_LABEL_SURFACE_LOADS;
			break;
		case TT_LABEL_DOMAIN_LOADS:
			return TT_LABEL_DOMAIN_LOADS;
			break;
		case TT_LABEL_TRIANGLE3:
			return TT_LABEL_TRIANGLE3;
			break;
		case TT_LABEL_TRIANGLE6:
			return TT_LABEL_TRIANGLE6;
			break;
		case TT_LABEL_QUADRANGLE4:
			return TT_LABEL_QUADRANGLE4;
			break;
		case TT_LABEL_QUADRANGLE8:
			return TT_LABEL_QUADRANGLE8;
			break;
		case TT_LABEL_QUADRANGLE9:
			return TT_LABEL_QUADRANGLE9;
			break;
		case TT_LABEL_ELEMENT:
			return TT_LABEL_ELEMENT;
			break;
		case TT_LABEL_FORCE:
			return TT_LABEL_FORCE;
			break;

		case TT_EOF:
			return TT_EOF;
			break;
		default:
			return TT_UNKNOWN;
			break;
	}
}

void FemJsonParser::fill(std::istream& file) {
	if (file.good()) {
		// move the remaining unprocessed buffer to the start
		char count = limit - tok;
		memcpy(buffer, tok, count);
		pos = &buffer[pos - tok];
		marker = &buffer[marker - tok];
		tok = buffer;

		// fill the vacant space
		file.read(buffer + count, 1024 - count - 1);
		limit = buffer + count + file.gcount();
		*limit = '\000';
	}
}
